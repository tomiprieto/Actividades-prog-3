Actividad 7.3: Modificar algoritmo anterior, para que se pida origen, destino y el camino más corto entre 2 vértices.

package programacion3;
   
import java.util.Scanner;

public class Programacion3 {

    final static int INF = 99999;

    public static void hayCiclosNegativos(int[][] fw) {
        for (int i = 0; i < fw.length; i++) {
            if (fw[i][i] < 0) {
                System.out.println("\nHay ciclos negativos");
                return;
            }
        }
        System.out.println("\nNo hay ciclos negativos");
    }

    public static int[] pesoMinimoDesde(int[][] fw, int origen) {
        return fw[origen];
    }

    public static void imprimirCamino(int[][] graph, int[][] next, int origen, int destino) {
        if (next[origen][destino] == -1) {
            System.out.println("No hay camino desde " + origen + " a " + destino);
            return;
        }

        System.out.print("Camino mas corto desde " + origen + " a " + destino + ": " + origen);
        while (origen != destino) {
            origen = next[origen][destino];
            System.out.print(" -> " + origen);
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int graph[][] = {
            {0, 1, INF, INF},
            {INF, 0, -1, INF},
            {INF, INF, 0, -1},
            {INF, -1, INF, 0}
        };

        int V = graph.length;

        FloydWarshall fw = new FloydWarshall();

        int[][] dist = fw.floydWarshall(graph, V);
        int[][] next = fw.floydWarshallNext(graph, V); // Método para almacenar los caminos

        hayCiclosNegativos(dist);

        System.out.print("Ingrese el nodo de origen, de 0 a 3: ");
        int origen = scanner.nextInt();
        System.out.print("Ingrese el nodo de destino, de 0 a 3: ");
        int destino = scanner.nextInt();

        int[] tiempoDesdeSedePrincipal = pesoMinimoDesde(dist, origen);

        System.out.println("\nLos tiempos minimos de entrega desde el nodo " + origen + " son:");
        for (int i = 0; i < tiempoDesdeSedePrincipal.length; i++) {
            System.out.println("\thacia nodo " + i + ": " + tiempoDesdeSedePrincipal[i]);
        }

        imprimirCamino(graph, next, origen, destino);
        
        scanner.close();
    }
}

class FloydWarshall {

    final static int INF = 99999;

    public int[][] floydWarshall(int[][] graph, int V) {
        int[][] dist = new int[V][V];

        // Inicializar la matriz de distancias
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                dist[i][j] = graph[i][j];
            }
        }

        // Aplicar el algoritmo de Floyd-Warshall
        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    // Solo sumar si ninguno de los caminos es infinito
                    if (dist[i][k] != INF && dist[k][j] != INF) {
                        if (dist[i][j] > dist[i][k] + dist[k][j]) {
                            dist[i][j] = dist[i][k] + dist[k][j];
                        }
                    }
                }
            }
        }

        return dist;
    }

    // Método adicional para almacenar el camino más corto
    public int[][] floydWarshallNext(int[][] graph, int V) {
        int[][] next = new int[V][V];

        // Inicializar la matriz next
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (graph[i][j] != INF) {
                    next[i][j] = j;
                } else {
                    next[i][j] = -1;
                }
            }
        }

        // Aplicar el algoritmo de Floyd-Warshall
        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    // Solo sumar si ninguno de los caminos es infinito
                    if (graph[i][k] != INF && graph[k][j] != INF) {
                        if (graph[i][j] > graph[i][k] + graph[k][j]) {
                            graph[i][j] = graph[i][k] + graph[k][j];
                            next[i][j] = next[i][k]; // Actualizar el camino
                        }
                    }
                }
            }
        }

        return next;
    }
}
